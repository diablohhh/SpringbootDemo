<!--debug为true打印logback运行错误时候的日志-->
<configuration debug="true">
    <!--获取配置文件里面的值,用于过滤特定日志,先定义一个 property 变量，
再 定义 springProperty ， property 必须在 springProperty 上方！！！！ 否则会出现 undefined-->
    <property scope="context" name="active" value="dev"/>
    <springProperty scope="context" name="active" source="spring.profiles.active" defaultValue="dev"/>
    <!--日志输出路径-->
    <property name="FILE_PATH" value="logBase"/>
    <!--日志输出名字-->
    <property name="NORMAL_FILE_NAME" value="normal"/>
    <property name="ERROR_FILE_NAME" value="error"/>
    <property name="WARN_FILE_NAME" value="warn"/>
    <property name="DEBUG_FILE_NAME" value="debug"/>
    <property name="INFO_FILE_NAME" value="info"/>
    <property name="TRACE_FILE_NAME" value="trace"/>
    <property name="FATAL_FILE_NAME" value="fatal"/>
    <!--自定义颜色配置-->
    <conversionRule conversionWord="customcolor"
                    converterClass="com.example.framework.configure.LogbackColorConfigure"/>
    <property name="OUTPUTFORMAT"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %magenta([%thread]) %customcolor(%-5level) %cyan(%logger{15}) - %msg%n"/>
    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->
    <!-- appender是configuration的子节点，是负责写日志的组件。 -->
    <!-- ConsoleAppender：把日志输出到控制台 -->
    <appender name="NORMAL" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- <pattern>%d %p (%file:%line\)- %m%n</pattern>-->
            <pattern>${OUTPUTFORMAT}</pattern>
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是sys.log -->
    <!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名-->
    <appender name="normalLog"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${FILE_PATH}/${NORMAL_FILE_NAME}.log</File>
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：log/sys.2017-12-05.0.log -->
            <fileNamePattern>${FILE_PATH}/${NORMAL_FILE_NAME}.%d.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- pattern节点，用来设置日志的输入格式 -->
            <pattern>${OUTPUTFORMAT}</pattern>
            <!-- 记录日志的编码 -->
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>
    <appender name="errorLog"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${FILE_PATH}/${ERROR_FILE_NAME}.log</File>
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：log/sys.2017-12-05.0.log -->
            <fileNamePattern>${FILE_PATH}/${ERROR_FILE_NAME}.%d.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- pattern节点，用来设置日志的输入格式 -->
            <pattern>${OUTPUTFORMAT}</pattern>
            <!-- 记录日志的编码 -->
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
        <!-- 只打印错误日志 <level>ERROR</level>-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!--DB持久化配置-->
    <!-- 输出日志到数据库 -->
    <springProperty scope="context" name="DBDRIVER" source="spring.datasource.driver-class-name" defaultValue="com.mysql.cj.jdbc.Driver"/>
    <springProperty scope="context" name="DBURL" source="spring.datasource.url" defaultValue="dev"/>
    <springProperty scope="context" name="DBUSER" source="spring.datasource.username" defaultValue="root"/>
    <springProperty scope="context" name="DBPASSWORD" source="spring.datasource.password" defaultValue="123456"/>
    <appender name="DBLOG" class="ch.qos.logback.classic.db.DBAppender">
        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
            <driverClass>${DBDRIVER}</driverClass>
            <url>${DBURL}</url>
            <user>${DBUSER}</user>
            <password>${DBPASSWORD}</password>
        </connectionSource>
    </appender>
    <!-- 控制台输出日志级别 -->
    <root level="INFO">
        <appender-ref ref="NORMAL"/>
    </root>
    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
    <!-- com.appley为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
    <!--使用janino语法，ifelse激活方式-->
    <if condition='property("active").contains("prod")'>
        <then>
            <logger name="com.example" level="ERROR">
                <appender-ref ref="errorLog"/>
                <appender-ref ref="DBLOG"/>
            </logger>
       </then>
    </if>
    <!--springProfile激活方式-->
    <springProfile name="dev">
        <!-- 开发环境时激活 -->
        <logger name="com.example" level="INFO">
            <appender-ref ref="normalLog"/>
            <!--<appender-ref ref="DBLOG"/>-->
        </logger>
    </springProfile>
    <springProfile name="dev,test">
        <!-- 开发，测试的时候激活-->
    </springProfile>
    <springProfile name="!prod">
        <!-- 当 "生产" 环境时，该配置不激活-->
    </springProfile>
</configuration>